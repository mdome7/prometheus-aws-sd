apply plugin: 'scala'
apply plugin: 'application'
apply plugin: 'docker'
apply plugin: "com.github.maiflai.scalatest"

group 'mdome7'
version '1.0'

buildscript {
  repositories {
    jcenter()
    maven {
      url 'https://plugins.gradle.org/m2/'
    }
  }
  dependencies {
    classpath "se.transmode.gradle:gradle-docker:1.2"
    classpath 'gradle.plugin.com.github.maiflai:gradle-scalatest:0.16'
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  jcenter()
}

ext {
  versions = [
    _scala: '2.11',
    scala : '2.11.8',
    jackson: '2.9.0'
  ]

  envProperties = [
    APP_NAME: project.name,
    APP_VERSION: project.version,
    LOG_DIR: "/var/log/${project.name}"
  ]


  appNameAndVersion = "${project.name}-${project.version}"
  sourceConfDir = "${rootDir}/conf"
  distBaseName = project.name
  distConfDir = "${distBaseName}/conf"
  distConfigName = "input.conf"
  distConfigPath = "${distConfDir}/${distConfigName}"

  buildResourcesDir = sourceSets.main.output.resourcesDir
  inputConfigFile = project.hasProperty('config') ? project.property('config') : "${buildResourcesDir}/sample-input.conf"
}

dependencies {
  compile "org.scala-lang:scala-library:${versions.scala}"

  compile 'ch.qos.logback:logback-classic:1.1.7'
  compile "com.typesafe.scala-logging:scala-logging_${versions._scala}:3.5.0"
  compile 'com.typesafe:config:1.3.3'
  compile "com.github.scopt:scopt_${versions._scala}:3.7.0"
  compile "com.amazonaws:aws-java-sdk-ec2:1.11.315"
  compile "com.amazonaws:aws-java-sdk-ecs:1.11.315"


  compile "com.fasterxml.jackson.core:jackson-core:${versions.jackson}"
  compile "com.fasterxml.jackson.core:jackson-databind:${versions.jackson}"
  compile "com.fasterxml.jackson.module:jackson-module-scala_${versions._scala}:${versions.jackson}"

  testCompile 'org.mockito:mockito-all:1.10.19'
  testCompile "org.scalatest:scalatest_${versions._scala}:3.0.5"
  testRuntime "org.scala-lang.modules:scala-xml_${versions._scala}:1.0.5"
  testRuntime 'org.pegdown:pegdown:1.4.2'
}

processResources {
  expand(envProperties)
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

// Unit tests
test {
  testLogging {
    events "passed", "skipped", "failed"
  }
}

mainClassName = 'mdome7.prometheusaws.Main'
applicationDefaultJvmArgs = ["-Xms128m", "-Xmx1g", "-XX:+UnlockExperimentalVMOptions", "-Dlogback.configurationFile=/${distConfDir}/logback.xml"]


docker {
  baseImage "openjdk:8-jre-alpine"
}

task copyConfigFile(type: Copy) {
  description "Prepare the specified config file: ${inputConfigFile}"


  from file (inputConfigFile)
  rename { String fileName -> distConfigName }
  into ("${buildResourcesDir}/conf")

  doLast {
    println "Using config file: ${inputConfigFile}"
  }
}

distributions {
  main {
    baseName = distBaseName
    contents {
      from("${buildResourcesDir}") {
        include('logback.xml')
        into 'conf'
      }
      // put search config files into the conf directory
      from(copyConfigFile) {
        into 'conf'
      }
    }
  }
}

task dockerBuild(type: Docker, dependsOn: installDist) {
  group 'Docker'
  description 'Build the Docker image with the appropriate configuration'

  applicationName = "${project.name}"
  tagVersion = "${project.version}"

  def runScript = "${distBaseName}/bin/${distBaseName}"

  entryPoint(["${runScript}"])

  defaultCommand(["${distConfigPath}"])

  addFile {
    from "${project.buildDir}/install/${distBaseName}"
    into "${distBaseName}"
  }

  runCommand "chmod +x /${runScript}"

  doLast {
    // required argument to app is the config file path - can override using 'docker run' command
    println("Docker default command args: ${distConfigPath}")
  }
}
